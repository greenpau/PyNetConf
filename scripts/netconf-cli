#!/usr/bin/env python

#------------------------------------------------------------------------------------------#
# File:      test.py                                                                       #
# Purpose:   PyNetConf - IETF Network Configuration Protocol Client Library                #
# Author:    Paul Greenberg                                                                #
# Version:   1.0                                                                           #
# Copyright: (c) 2014 Paul Greenberg <paul@greenberg.pro>                                  #
#------------------------------------------------------------------------------------------#

import os;
import sys;
if sys.version_info[0] < 3:
    sys.stderr.write(os.path.basename(__file__) + ' requires Python 3 or higher.\n');
    sys.stderr.write("python3 " + __file__ + '\n');
    sys.exit(1);
sys.path.append(os.path.join('/'.join(os.path.abspath(__file__).split('/')[:-2])));
import argparse;
import pprint;
import datetime;
import traceback;
import logging;

logging.basicConfig(format='%(asctime)s - %(name)s - %(funcName)s() - %(levelname)s - %(message)s');
logger = logging.getLogger(__file__);
logger.setLevel(logging.DEBUG);

try:
    from pynetconf import NetConfSession;
except Exception as err:
    for e in err.args:
        logger.error(str(type(err).__name__) + ': ' + str(e));
    sys.exit(1);

def main():
    global logger;
    func = 'main()';
    descr = 'PyNetConf - IETF Network Configuration Protocol Client Library\n\n';
    descr += 'examples:\n \n';
    descr += '  python3 ' + str(__file__) + ' -ho router -u admin -p cisco -c "show interfaces" -l 5\n \n';
    descr += '  python3 ' + str(__file__) + ' -ho router -u admin -k ~/.ssh/id_rsa \\\n';
    descr += '    --cmd "show interfaces" --cmd "show version" -l 5\n \n';
    descr += '  python3 ' + str(__file__) + ' --help';
    epil = 'documentation:\n  https://github.com/greenpau/PyNetConf\n \n';
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=descr, epilog=epil);
    conn_group = parser.add_argument_group('network connectivity arguments');
    conn_group.add_argument('-ho', '--host', dest='ihost', metavar='HOST', 
                            type=str, required=True, help='host IP or DNS Name');
    conn_group.add_argument('-po', '--port', dest='iport', metavar='PORT', 
                            type=int, default=830, help='tcp port (default: 830)');
    auth_group = parser.add_argument_group('authentication arguments')
    auth_group.add_argument('-u', '--user', dest='iuser', metavar='USERNAME', 
                            type=str, required=True, help='username');
    credgroup = auth_group.add_mutually_exclusive_group(required=True);
    credgroup.add_argument('-p', '--pass', dest='ipass', metavar='PASSWORD', 
                           type=str, help='password');
    credgroup.add_argument('-k', '--key', dest='ipass', metavar='SSH_KEY_FILE_PATH', 
                           type=argparse.FileType('r'), help='SSH private key file path');
    cmd_group = parser.add_argument_group('directives');
    cmd_group.add_argument('-c', '--cmd', dest='icmd', metavar='COMMAND', action='append', 
                           type=str, required=True, help='commands');
    auth_group.add_argument('--check-fingerprint', dest='ifc', action='store_true', 
                            help='enable SSH fingerprint check');
    parser.add_argument('-l', '--log-level', dest='ilog', metavar='LEVEL', type=int, 
                        default=0, choices=range(1, 4), help='log level (default: 0)');
    args = parser.parse_args();
 
    if args.ilog == 1:
        logger.setLevel(logging.WARN);
    elif args.ilog == 2:
        logger.setLevel(logging.INFO);
    elif args.ilog == 3:
        logger.setLevel(logging.DEBUG);
    else:
        logger.setLevel(logging.ERROR);

    logger.info('xyz');
    try:
        nc = NetConfSession(args.ihost, args.iuser, args.ipass, args.iport, args.ifc, args.ilog);
        if nc.error:
            logger.error('failed to prepare for a NETCONF session to ' + args.ihost + ' over TCP port ' + str(args.iport));
            sys.exit(1);
        nc.connect();
        if nc.error:
            logger.error('failed to establish a NETCONF session to ' + args.ihost + ' over TCP port ' + str(args.iport));
            sys.exit(1);
        logger.info('connected to ' + args.ihost + ' over TCP port ' + str(args.iport) + ' for a NETCONF session');

        ''' display client and server capabilities '''
        nc.show('capabilities', 'client');  # alternatively, pprint.pprint(nc.capabilities['client']);
        nc.show('capabilities', 'server');  # alternatively, pprint.pprint(nc.capabilities['server']);

        for c in args.icmd:            
            nc.cmd(c);
            if nc.error:
                logger.error('failed to execute "' + c +'" command on ' + args.ihost);
                sys.exit(1);
            logger.info(str(nc.resp));

        nc.close();
        if nc.error:
            logger.error('failed to graceful disconnect a NETCONF session to ' + args.ihost + ' over TCP port ' + str(args.iport));
            sys.exit(1);

    except Exception as err:
        for e in err.args:
            logger.error(str(type(err).__name__) + ': ' + str(e));
        for i in str(traceback.format_exc()).splitlines():
            logger.error(str(type(err).__name__) + ': ' + str(i));
        return;
    
    sys.exit(0);

if __name__ == '__main__':
    main();
